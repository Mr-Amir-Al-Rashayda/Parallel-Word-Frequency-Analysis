// Compilation instructions for different thread configurations
// gcc -o Multithreading_Approach Multithreading_Approach.c -pthread 
// ./Multithreading_Approach 2  // Executes program with 2 threads
// ./Multithreading_Approach 4  // Executes program with 4 threads
// ./Multithreading_Approach 6  // Executes program with 6 threads
// ./Multithreading_Approach 8  // Executes program with 8 threads

// Include necessary header files
#include <stdio.h>      // Standard input/output operations
#include <stdlib.h>     // Memory allocation, random numbers, etc.
#include <string.h>     // String manipulation functions 
#include <time.h>       // Time-related functions
#include <pthread.h>    // POSIX threads library
#include <unistd.h>     // UNIX standard functions
#include <sys/stat.h>   // File status and information
#include <fcntl.h>      // File control options

// Define constant values
#define MAX_WORD_LENGTH 100      // Maximum length of a single word
#define INITIAL_ARRAY_SIZE 1000000   // Initial size of word array
#define PROGRESS_INTERVAL 60     // Interval for progress updates in seconds

// Structure to store word and its frequency count
typedef struct {
    char* word;         // Pointer to store the word string
    int frequency;      // Counter for word occurrences
} WordFreq;

// Structure to hold thread-specific data
typedef struct {
    int thread_id;          // Unique identifier for each thread
    long start_pos;         // Starting position in file for this thread
    long chunk_size;        // Size of chunk to process
    WordFreq* results;      // Array to store word frequencies
    int unique_words;       // Count of unique words found
    long total_words;       // Total words processed
} ThreadData;

// Global mutex for thread synchronization
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;

// Global shared counters protected by mutex
long shared_total_words = 0;     // Total words across all threads
int shared_unique_words = 0;     // Total unique words across all threads
time_t start_time;              // Program start time

// Function to print progress information
void print_progress(long total_words, int unique_words, time_t start_time) {
    time_t current_time = time(NULL);    // Get current time
    double elapsed = difftime(current_time, start_time);   // Calculate elapsed time
    printf("Progress: Processed %ld words, %d unique words found (%.2f minutes elapsed)\n",
           total_words, unique_words, elapsed / 60.0);
    fflush(stdout);    // Force output to display immediately
}

// Function to swap two WordFreq elements (used in heap sort)
void swap(WordFreq* a, WordFreq* b) {
    WordFreq temp = *a;     // Temporary storage for swap
    *a = *b;               // Perform the swap
    *b = temp;
}

// Heapify function for heap sort algorithm
void heapify(WordFreq arr[], int n, int i) {
    int largest = i;        // Initialize largest as root
    int left = 2 * i + 1;   // Left child index
    int right = 2 * i + 2;  // Right child index

    // If left child is larger than root
    if (left < n && arr[left].frequency > arr[largest].frequency)
        largest = left;

    // If right child is larger than largest so far
    if (right < n && arr[right].frequency > arr[largest].frequency)
        largest = right;

    // If largest is not root
    if (largest != i) {
        swap(&arr[i], &arr[largest]);    // Swap and recursively heapify
        heapify(arr, n, largest);
    }
}

// Main heap sort function
void heap_sort(WordFreq arr[], int n) {
    // Build heap (rearrange array)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // Extract elements from heap one by one
    for (int i = n - 1; i > 0; i--) {
        swap(&arr[0], &arr[i]);    // Move current root to end
        heapify(arr, i, 0);        // Call heapify on reduced heap
    }
}

// Function to find or add a word in the word frequency array
int find_or_add_word(WordFreq* words, int* size, const char* word) {
    // Search for existing word
    for (int i = 0; i < *size; i++) {
        if (strcmp(words[i].word, word) == 0) {
            words[i].frequency++;   // Increment frequency if found
            return i;
        }
    }

    // Add new word if not found
    words[*size].word = strdup(word);   // Create copy of word
    if (words[*size].word == NULL) {
        perror("Memory allocation failed for word");
        pthread_exit(NULL);
    }
    words[*size].frequency = 1;    // Initialize frequency
    (*size)++;                     // Increment size
    return *size - 1;              // Return index of new word
}

// Function to get file size
long get_file_size(const char* filename) {
    struct stat st;
    if (stat(filename, &st) == 0)    // Get file statistics
        return st.st_size;           // Return file size
    return -1;                       // Return error
}

// Thread function to process file chunk
void* process_chunk(void* arg) {
    ThreadData* data = (ThreadData*)arg;
    FILE* file = fopen("text8.txt", "r");
    if (!file) {
        perror("Error opening file");
        pthread_exit(NULL);
    }

    // Preallocate memory for word array
    WordFreq* words = malloc(INITIAL_ARRAY_SIZE * sizeof(WordFreq));
    if (!words) {
        perror("Memory allocation failed");
        fclose(file);
        pthread_exit(NULL);
    }

    // Initialize variables
    char word[MAX_WORD_LENGTH];
    data->unique_words = 0;
    data->total_words = 0;
    long bytes_read = 0;
    time_t last_progress = time(NULL);

    // Process words in chunk
    while (bytes_read < data->chunk_size && fscanf(file, "%99s", word) == 1) {
        data->total_words++;
        bytes_read += strlen(word) + 1;

        // Process word
        int index = find_or_add_word(words, &data->unique_words, word);

        // Update shared statistics in batches
        if (data->total_words % 1000 == 0) {
            pthread_mutex_lock(&mutex);
            shared_total_words += 1000; // Update in batches
            pthread_mutex_unlock(&mutex);
        }

        // Print progress if interval elapsed
        time_t current = time(NULL);
        if (difftime(current, last_progress) >= PROGRESS_INTERVAL) {
            printf("Thread %d: Processed %ld words, %d unique words\n",
                   data->thread_id, data->total_words, data->unique_words);
            last_progress = current;
        }
    }

    // Clean up and return
    fclose(file);
    data->results = words;
    printf("Thread %d completed: %ld words processed, %d unique words found\n",
           data->thread_id, data->total_words, data->unique_words);
    pthread_exit(NULL);
}

// Function to merge results from all threads
WordFreq* merge_thread_results(ThreadData* thread_data, int num_threads, int* final_unique_words) {
    // Allocate memory for merged results
    WordFreq* merged = malloc(INITIAL_ARRAY_SIZE * sizeof(WordFreq));
    if (!merged) {
        perror("Memory allocation failed for merge");
        exit(1);
    }

    // Initialize counters
    *final_unique_words = 0;
    int merged_size = INITIAL_ARRAY_SIZE;

    // Process results from each thread
    for (int t = 0; t < num_threads; t++) {
        for (int i = 0; i < thread_data[t].unique_words; i++) {
            int found = 0;
            // Check if word already exists in merged results
            for (int j = 0; j < *final_unique_words; j++) {
                if (strcmp(thread_data[t].results[i].word, merged[j].word) == 0) {
                    merged[j].frequency += thread_data[t].results[i].frequency;
                    found = 1;
                    break;
                }
            }

            // Add new word if not found
            if (!found) {
                // Resize merged array if needed
                if (*final_unique_words >= merged_size) {
                    merged_size *= 2;
                    WordFreq* temp = realloc(merged, merged_size * sizeof(WordFreq));
                    if (!temp) {
                        perror("Memory reallocation failed during merge");
                        exit(1);
                    }
                    merged = temp;
                }
                // Add new word to merged results
                merged[*final_unique_words].word = strdup(thread_data[t].results[i].word);
                merged[*final_unique_words].frequency = thread_data[t].results[i].frequency;
                (*final_unique_words)++;
            }
        }
    }

    return merged;
}

// Main function
int main(int argc, char* argv[]) {
    // Check command line arguments
    if (argc != 2) {
        printf("Usage: %s <num_threads>\n", argv[0]);
        return 1;
    }

    // Parse and validate number of threads
    int num_threads = atoi(argv[1]);
    if (num_threads <= 0 || num_threads > 8) {
        printf("Number of threads must be between 1 and 8\n");
        return 1;
    }

    // Initialize timing and counters
    start_time = time(NULL);
    shared_total_words = 0;
    shared_unique_words = 0;

    // Get file size
    long file_size = get_file_size("text8.txt");
    if (file_size == -1) {
        perror("Error getting file size");
        return 1;
    }

    // Calculate chunk size and create thread arrays
    long chunk_size = file_size / num_threads;
    pthread_t threads[num_threads];
    ThreadData thread_data[num_threads];

    printf("Starting word frequency analysis with %d threads...\n", num_threads);
    time_t total_start = time(NULL);

    // Create threads
    for (int i = 0; i < num_threads; i++) {
        thread_data[i].thread_id = i;
        thread_data[i].start_pos = i * chunk_size;
        // Adjust last chunk size to handle remainder
        thread_data[i].chunk_size = (i == num_threads - 1) ?
                                   (file_size - thread_data[i].start_pos) : chunk_size;

        // Create thread
        if (pthread_create(&threads[i], NULL, process_chunk, &thread_data[i]) != 0) {
            perror("Thread creation failed");
            return 1;
        }
    }

    // Wait for all threads to complete
    for (int i = 0; i < num_threads; i++) {
        if (pthread_join(threads[i], NULL) != 0) {
            perror("Thread join failed");
            return 1;
        }
    }

    // Merge results from all threads
    int final_unique_words;
    WordFreq* final_results = merge_thread_results(thread_data, num_threads, &final_unique_words);

    // Sort final results
    printf("\nSorting words by frequency...\n");
    heap_sort(final_results, final_unique_words);

    // Print top 10 most frequent words
    printf("\nTop 10 most frequent words:\n");
    printf("%-20s %s\n", "Word", "Frequency");
    printf("----------------------------------------\n");
    for (int i = final_unique_words - 1; i >= final_unique_words - 10 && i >= 0; i--) {
        printf("%-20s %d\n", final_results[i].word, final_results[i].frequency);
    }

    // Calculate and print total execution time
    time_t total_end = time(NULL);
    double total_time = difftime(total_end, total_start);
    printf("\nTotal execution time: %.2f seconds\n", total_time);

    // Clean up allocated memory
    for (int i = 0; i < num_threads; i++) {
        for (int j = 0; j < thread_data[i].unique_words; j++) {
            free(thread_data[i].results[j].word);
        }
        free(thread_data[i].results);
    }
    for (int i = 0; i < final_unique_words; i++) {
        free(final_results[i].word);
    }
    free(final_results);
    pthread_mutex_destroy(&mutex);

    return 0;
}
